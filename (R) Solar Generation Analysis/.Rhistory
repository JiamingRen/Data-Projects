new_solar_panel %>%
filter(`Capacity..kW.`>=min & `Capacity..kW.`<=max) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(~Longitude,
~Latitude,
popup = ~paste("Building: ",new_solar_panel$MonBuildNum,", ","Engergy Generated: ",Total),
radius = ~Total^(0.48)/15
)
}
)
}
shinyApp(ui,server)
new_solar_panel %>%
filter(`Capacity..kW.`>=min & `Capacity..kW.`<=max) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(~Longitude,
~Latitude,
popup = ~paste("Building: ",new_solar_panel$MonBuildNum,", ","Engergy Generated: ",Total),
radius = ~Total/7500
)
server <- function(input, output) {
output$vis1 <- renderPlot(
{
top5_bar
}
)
output$map <- renderLeaflet(
{
min = input$slider[1]
max = input$slider[2]
new_solar_panel %>%
filter(`Capacity..kW.`>=min & `Capacity..kW.`<=max) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(~Longitude,
~Latitude,
popup = ~paste("Building: ",new_solar_panel$MonBuildNum,", ","Engergy Generated: ",Total),
radius = ~Total/7500
)
}
)
}
shinyApp(ui,server)
new_solar_panel %>%
filter(Capacity..kW.>=min & `Capacity..kW.`<=max) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(~Longitude,
~Latitude,
popup = ~paste("Building: ",new_solar_panel$MonBuildNum,", ","Engergy Generated: ",Total),
radius = ~Total/7500
)
server <- function(input, output) {
output$vis1 <- renderPlot(
{
top5_bar
}
)
output$map <- renderLeaflet(
{
min = input$slider[1]
max = input$slider[2]
new_solar_panel %>%
filter(Capacity..kW.>=min & `Capacity..kW.`<=max) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(~Longitude,
~Latitude,
popup = ~paste("Building: ",new_solar_panel$MonBuildNum,", ","Engergy Generated: ",Total),
radius = ~Total/7500
)
}
)
}
shinyApp(ui,server)
new_solar_panel %>%
filter(Capacity..kW.>=min & `Capacity..kW.`<=max) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(~Longitude,
~Latitude,
popup = ~paste("Building: ",new_solar_panel$MonBuildNum,", ","Engergy Generated: ",Total),
radius = ~Total/7500
) %>%
addMarkers(
~solar_panel$Longitude,
~solar_panel$Latitude,
popup = ~paste("Building: ",solar_panel$MonBuildNum,", ","Engergy Generated: ",Total),
)
server <- function(input, output) {
output$vis1 <- renderPlot(
{
top5_bar
}
)
output$map <- renderLeaflet(
{
min = input$slider[1]
max = input$slider[2]
new_solar_panel %>%
filter(Capacity..kW.>=min & `Capacity..kW.`<=max) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(~Longitude,
~Latitude,
popup = ~paste("Building: ",new_solar_panel$MonBuildNum,", ","Engergy Generated: ",Total),
radius = ~Total/7500
) %>%
addMarkers(
~solar_panel$Longitude,
~solar_panel$Latitude,
popup = ~paste("Building: ",solar_panel$MonBuildNum,", ","Engergy Generated: ",Total),
)
}
)
}
shinyApp(ui,server)
ui <- fluidPage(
#row for title
fluidRow(
column(12,
h1("Solar Energy Generation in Monash University Clayton Campus",
style="font-weight:bold"),
style="text-align:center;
background-color:red;"
)
),
fluidRow(
column(4,
h3("Top 5 energy generating solar panels on buildings",
style="font-weight:bold"),
plotOutput("vis1"),
style="background-color:blue"),
column(8,
sliderInput(
inputId = "slider",
label= "Energy Generate(KWh) slider",
min = min(new_solar_panel$Capacity..kW.),
max= max(new_solar_panel$Capacity..kW.),
value = range(new_solar_panel$Capacity..kW.)
),
leafletOutput("map"),
sytle="background-color:green;width:100%;height:100%;")
)
)
server <- function(input, output) {
output$vis1 <- renderPlot(
{
top5_bar
}
)
output$map <- renderLeaflet(
{
min = input$slider[1]
max = input$slider[2]
new_solar_panel %>%
filter(Capacity..kW.>=min & `Capacity..kW.`<=max) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(~Longitude,
~Latitude,
popup = ~paste("Building: ",new_solar_panel$MonBuildNum,", ","Engergy Generated: ",Total),
radius = ~Total/7500
) %>%
addMarkers(
~Longitude,
~Latitude,
popup = ~paste("Building: ",solar_panel$MonBuildNum,", ","Engergy Generated: ",Total),
)
}
)
}
shinyApp(ui,server)
map %>% filter(new_solar_panel$Capacity..kW. >= min, new_solar_panel$Capacity..kW.<=max)
{
new_solar_panel %>%
filter(Capacity..kW.>=min & `Capacity..kW.`<=max) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(~Longitude,
~Latitude,
popup = ~paste("Building: ",new_solar_panel$MonBuildNum,", ","Engergy Generated: ",Total),
radius = ~Total/7500
) %>%
addMarkers(
~Longitude,
~Latitude,
popup = ~paste("Building: ",solar_panel$MonBuildNum,", ","Engergy Generated: ",Total),
)
output$map <- renderLeaflet(
{
min = input$slider[1]
max = input$slider[2]
new_solar_panel %>%
filter(Capacity..kW.>=min & `Capacity..kW.`<=max) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(~Longitude,
~Latitude,
popup = ~paste("Building: ",new_solar_panel$MonBuildNum,", ","Engergy Generated: ",Total),
radius = ~Total/7500
) %>%
addMarkers(
~Longitude,
~Latitude,
popup = ~paste("Building: ",solar_panel$MonBuildNum,", ","Engergy Generated: ",Total),
)
}
)
server <- function(input, output) {
output$vis1 <- renderPlot(
{
top5_bar
}
)
output$map <- renderLeaflet(
{
min = input$slider[1]
max = input$slider[2]
new_solar_panel %>%
filter(Capacity..kW.>=min & `Capacity..kW.`<=max) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(~Longitude,
~Latitude,
popup = ~paste("Building: ",new_solar_panel$MonBuildNum,", ","Engergy Generated: ",Total),
radius = ~Total/7500
) %>%
addMarkers(
~Longitude,
~Latitude,
popup = ~paste("Building: ",solar_panel$MonBuildNum,", ","Engergy Generated: ",Total),
)
}
)
}
shinyApp(ui,server)
ui <- fluidPage(
#row for title
fluidRow(
column(12,
h1("Solar Energy Generation in Monash University Clayton Campus",
style="font-weight:bold"),
style="text-align:center;
background-color:red;"
)
),
fluidRow(
column(4,
h3("Top 5 energy generating solar panels on buildings",
style="font-weight:bold"),
plotOutput("vis1"),
style="background-color:blue"),
column(8,
sliderInput(
inputId = "slider",
label= "Energy Generate(KWh) slider",
min = min(new_solar_panel$Capacity..kW.),
max= max(new_solar_panel$Capacity..kW.),
value = range(new_solar_panel$Capacity..kW.)
),
leafletOutput("map"),
sytle="background-color:green;width:100%;height:100%;")
)
)
server <- function(input, output) {
output$vis1 <- renderPlot(
{
top5_bar
}
)
output$map <- renderLeaflet(
{
min = input$slider[1]
max = input$slider[2]
new_solar_panel %>%
filter(Capacity..kW.>=min & `Capacity..kW.`<=max) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(~Longitude,
~Latitude,
popup = ~paste("Building: ",new_solar_panel$MonBuildNum,", ","Engergy Generated: ",Total),
radius = ~Total/7500
) %>%
addMarkers(
~Longitude,
~Latitude,
popup = ~paste("Building: ",solar_panel$MonBuildNum,", ","Engergy Generated: ",Total),
)
}
)
}
shinyApp(ui,server)
#add the MonBuildingNum to the solar data dataframe.
new_solar_data<-merge(solar_data,
solar_panel[,c("BuildingNum","MonBuildNum")],
by="BuildingNum")
#filter top5 building all information from original dataset
fulldata_top_5 <- new_solar_data %>% filter(`MonBuildNum` %in% top_5$MonBuildNum)
#Check NA for each columns
#plot the missing map
missmap(fulldata_top_5)
#summary missing value in a table
fulldata_top_5 %>%
group_by(MonBuildNum) %>%
miss_var_summary()
#visualize how top 5 buildings energy generation varies over the course of 2020
plot<-fulldata_top_5 %>%
group_by(Timestamp =Timestamp %>% as.Date(),MonBuildNum) %>%
summarise(Daily_energy = sum(`Real.Energy.Into.the.Load..kWh.`,na.rm = T)) %>%
ggplot(aes(x=Timestamp,
y=Daily_energy,
group=MonBuildNum,
colour=MonBuildNum))+
geom_line()+
theme(legend.position = "top",plot.title = element_text(hjust=0.5))+
labs(x="Timestamp",y="Energy Generate(KWh)",title="Top 5 engergy generating buildings in 2020")+
theme_ipsum()
#interactive visualization
plot %>% ggplotly()
#get total energy generated for each building
solar_data_sum <- new_solar_data %>%
group_by(MonBuildNum) %>%
summarise(Total=Real.Energy.Into.the.Load..kWh. %>% sum(na.rm = T))
#add sums to the solar panel dataset
new_solar_panel <- left_join(solar_panel,solar_data_sum[,c("MonBuildNum","Total")],by="MonBuildNum")
new_solar_panel[is.na(new_solar_panel)] <-0
#a.use the provided longitude and latitude values to position the symbols
map<-new_solar_panel %>% leaflet() %>%
addTiles() %>%
addCircleMarkers(~solar_panel$Longitude,
~solar_panel$Latitude,
popup = ~paste("Building: ",solar_panel$MonBuildNum,", ","Engergy Generated: ",Total),
radius = ~Total/7500
) %>%
addMarkers(
~solar_panel$Longitude,
~solar_panel$Latitude,
popup = ~paste("Building: ",solar_panel$MonBuildNum,", ","Engergy Generated: ",Total),
)
map
ui <- fluidPage(
#row for title
fluidRow(
column(12,
h1("Solar Energy Generation in Monash University Clayton Campus",
style="font-weight:bold"),
style="text-align:center;
background-color:red;"
)
),
fluidRow(
column(4,
h3("Top 5 energy generating solar panels on buildings",
style="font-weight:bold"),
plotOutput("vis1"),
style="background-color:blue"),
column(8,
sliderInput(
inputId = "slider",
label= "Energy Generate(KWh) slider",
min = min(new_solar_panel$Capacity..kW.),
max= max(new_solar_panel$Capacity..kW.),
value = range(new_solar_panel$Capacity..kW.)
),
leafletOutput("map"),
sytle="background-color:green;width:100%;height:100%;")
)
)
server <- function(input, output) {
output$vis1 <- renderPlot(
{
top5_bar
}
)
output$map <- renderLeaflet(
{
min = input$slider[1]
max = input$slider[2]
new_solar_panel %>%
filter(Capacity..kW.>=min & `Capacity..kW.`<=max) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(~Longitude,
~Latitude,
popup = ~paste("Building: ",new_solar_panel$MonBuildNum,", ","Engergy Generated: ",Total),
radius = ~Total/7500
) %>%
addMarkers(
~Longitude,
~Latitude,
popup = ~paste("Building: ",solar_panel$MonBuildNum,", ","Engergy Generated: ",Total),
)
}
)
}
shinyApp(ui,server)
server <- function(input, output) {
output$vis1 <- renderPlot(
{
top5_bar
}
)
output$map <- renderLeaflet(
{
min = input$slider[1]
max = input$slider[2]
new_solar_panel %>%
filter(Capacity..kW.>=min & `Capacity..kW.`<=max) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(~Longitude,
~Latitude,
popup = ~paste("Building: ",new_solar_panel$MonBuildNum,", ","Engergy Generated: ",Total),
radius = ~Total/7500
) %>%
addMarkers(
~Longitude,
~Latitude,
popup = ~paste("Building: ",solar_panel$MonBuildNum,", ","Engergy Generated: ",Total),
)
}
)
}
shinyApp(ui,server)
library(shiny); runApp('PE2.R')
#run shiny app
shinyApp(ui,server)
#set up ui
ui <- fluidPage(
#row for title
fluidRow(
column(12,
h1("Solar Energy Generation in Monash University Clayton Campus",
style="font-weight:bold"),
style="text-align:center;"
),
style="border:1px solid black"
),
#draw vis1
fluidRow(
column(4,
h3("Top 5 energy generating solar panels on buildings",
style="font-weight:bold;"),
p("the top 5 buildings based on their total energy generated in 2020"),
plotOutput("vis1"),
style="border:1px solid black"
),
column(8,
sliderInput(
inputId = "slider",
label= "Energy Generate(KWh) slider",
min = min(new_solar_panel$Capacity..kW.),
max= max(new_solar_panel$Capacity..kW.),
value = range(new_solar_panel$Capacity..kW.)
),
leafletOutput("map"),
style="border:1px solid black"
)
),
fluidRow(
column(4,
h3("Energy generation thoughout 2020",style="font-weight:bold;"),
p("energy generation varies over the course of 2020 for the same 5 buildings"),
style="border:1px solid black"
),
column(8,
plotlyOutput("vis2"),
style="border:1px solid black"
),
style="border:1px solid black"
)
)
#Define server logic
server <- function(input, output) {
output$vis1 <- renderPlot(
{
top5_bar
}
)
output$map <- renderLeaflet(
{
min = input$slider[1]
max = input$slider[2]
new_solar_panel %>%
filter(Capacity..kW.>=min & `Capacity..kW.`<=max) %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(~Longitude,
~Latitude,
popup = ~paste("Building: ",new_solar_panel$MonBuildNum,", ","Engergy Generated: ",Total),
radius = ~Total/7500
) %>%
addMarkers(
~Longitude,
~Latitude,
popup = ~paste("Building: ",solar_panel$MonBuildNum,", ","Engergy Generated: ",Total),
)
}
)
output$vis2 <- renderPlotly(
{
plot %>% ggplotly()
}
)
}
#run shiny app
shinyApp(ui,server)
library(shiny); runApp('PE2.R')
runApp('PE2.R')
